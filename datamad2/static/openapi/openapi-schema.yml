#info:
#  description: ''
#  title: ''
#  version: ''
#openapi: 3.0.0
#paths:
#  /grants/:
#    get:
#      description: API endpoint that allows grants to be viewed or edited.
#      operationId: grants_list
#      parameters:
#      - in: query
#        name: page
#        schema:
#          description: A page number within the paginated result set.
#          title: Page
#          type: integer
#      tags:
#      - grants
#    post:
#      description: API endpoint that allows grants to be viewed or edited.
#      operationId: grants_create
#      tags:
#      - grants
#  /grants/{id}/:
#    delete:
#      description: API endpoint that allows grants to be viewed or edited.
#      operationId: grants_delete
#      parameters:
#      - in: path
#        name: id
#        required: true
#        schema:
#          description: A unique integer value identifying this grant.
#          title: ID
#          type: integer
#      tags:
#      - grants
#    get:
#      description: API endpoint that allows grants to be viewed or edited.
#      operationId: grants_read
#      parameters:
#      - in: path
#        name: id
#        required: true
#        schema:
#          description: A unique integer value identifying this grant.
#          title: ID
#          type: integer
#      tags:
#      - grants
#    patch:
#      description: API endpoint that allows grants to be viewed or edited.
#      operationId: grants_partial_update
#      parameters:
#      - in: path
#        name: id
#        required: true
#        schema:
#          description: A unique integer value identifying this grant.
#          title: ID
#          type: integer
#      tags:
#      - grants
#    put:
#      description: API endpoint that allows grants to be viewed or edited.
#      operationId: grants_update
#      parameters:
#      - in: path
#        name: id
#        required: true
#        schema:
#          description: A unique integer value identifying this grant.
#          title: ID
#          type: integer
#      tags:
#      - grants
#  /importedgrants/:
#    get:
#      description: API endpoint that allows grants to be viewed or edited.
#      operationId: importedgrants_list
#      parameters:
#      - in: query
#        name: page
#        schema:
#          description: A page number within the paginated result set.
#          title: Page
#          type: integer
#      tags:
#      - importedgrants
#    post:
#      description: API endpoint that allows grants to be viewed or edited.
#      operationId: importedgrants_create
#      tags:
#      - importedgrants
#  /importedgrants/{id}/:
#    delete:
#      description: API endpoint that allows grants to be viewed or edited.
#      operationId: importedgrants_delete
#      parameters:
#      - in: path
#        name: id
#        required: true
#        schema:
#          description: A unique integer value identifying this imported grant.
#          title: ID
#          type: integer
#      tags:
#      - importedgrants
#    get:
#      description: API endpoint that allows grants to be viewed or edited.
#      operationId: importedgrants_read
#      parameters:
#      - in: path
#        name: id
#        required: true
#        schema:
#          description: A unique integer value identifying this imported grant.
#          title: ID
#          type: integer
#      tags:
#      - importedgrants
#    patch:
#      description: API endpoint that allows grants to be viewed or edited.
#      operationId: importedgrants_partial_update
#      parameters:
#      - in: path
#        name: id
#        required: true
#        schema:
#          description: A unique integer value identifying this imported grant.
#          title: ID
#          type: integer
#      tags:
#      - importedgrants
#    put:
#      description: API endpoint that allows grants to be viewed or edited.
#      operationId: importedgrants_update
#      parameters:
#      - in: path
#        name: id
#        required: true
#        schema:
#          description: A unique integer value identifying this imported grant.
#          title: ID
#          type: integer
#      tags:
#      - importedgrants
#  /permission/:
#    get:
#      description: API endpoint that allows permissions to be viewed or edited.
#      operationId: permission_list
#      parameters:
#      - in: query
#        name: page
#        schema:
#          description: A page number within the paginated result set.
#          title: Page
#          type: integer
#      tags:
#      - permission
#    post:
#      description: API endpoint that allows permissions to be viewed or edited.
#      operationId: permission_create
#      tags:
#      - permission
#  /permission/{id}/:
#    delete:
#      description: API endpoint that allows permissions to be viewed or edited.
#      operationId: permission_delete
#      parameters:
#      - in: path
#        name: id
#        required: true
#        schema:
#          description: A unique integer value identifying this permission.
#          title: ID
#          type: integer
#      tags:
#      - permission
#    get:
#      description: API endpoint that allows permissions to be viewed or edited.
#      operationId: permission_read
#      parameters:
#      - in: path
#        name: id
#        required: true
#        schema:
#          description: A unique integer value identifying this permission.
#          title: ID
#          type: integer
#      tags:
#      - permission
#    patch:
#      description: API endpoint that allows permissions to be viewed or edited.
#      operationId: permission_partial_update
#      parameters:
#      - in: path
#        name: id
#        required: true
#        schema:
#          description: A unique integer value identifying this permission.
#          title: ID
#          type: integer
#      tags:
#      - permission
#    put:
#      description: API endpoint that allows permissions to be viewed or edited.
#      operationId: permission_update
#      parameters:
#      - in: path
#        name: id
#        required: true
#        schema:
#          description: A unique integer value identifying this permission.
#          title: ID
#          type: integer
#      tags:
#      - permission
#  /users/:
#    get:
#      description: API endpoint that allows grants to be viewed or edited.
#      operationId: users_list
#      parameters:
#      - in: query
#        name: page
#        schema:
#          description: A page number within the paginated result set.
#          title: Page
#          type: integer
#      tags:
#      - users
#    post:
#      description: API endpoint that allows grants to be viewed or edited.
#      operationId: users_create
#      tags:
#      - users
#  /users/{id}/:
#    delete:
#      description: API endpoint that allows grants to be viewed or edited.
#      operationId: users_delete
#      parameters:
#      - in: path
#        name: id
#        required: true
#        schema:
#          description: A unique integer value identifying this user.
#          title: ID
#          type: integer
#      tags:
#      - users
#    get:
#      description: API endpoint that allows grants to be viewed or edited.
#      operationId: users_read
#      parameters:
#      - in: path
#        name: id
#        required: true
#        schema:
#          description: A unique integer value identifying this user.
#          title: ID
#          type: integer
#      tags:
#      - users
#    patch:
#      description: API endpoint that allows grants to be viewed or edited.
#      operationId: users_partial_update
#      parameters:
#      - in: path
#        name: id
#        required: true
#        schema:
#          description: A unique integer value identifying this user.
#          title: ID
#          type: integer
#      tags:
#      - users
#    put:
#      description: API endpoint that allows grants to be viewed or edited.
#      operationId: users_update
#      parameters:
#      - in: path
#        name: id
#        required: true
#        schema:
#          description: A unique integer value identifying this user.
#          title: ID
#          type: integer
#      tags:
#      - users
#servers:
#- url: ''


swagger: "2.0"
info:
  description: "DataMAD API"
  version: "1.0.0"
  title: "Swagger DataMAD"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "eleanor.smith@stfc.ac.uk"
host: "127.0.0.1:8000"
basePath: "/"
tags:
- name: "grants"
  description: "Information about Grants"
- name: "importedgrants"
  description: "Information about Imported Grants"
- name: "users"
  description: "Information about users of DataMAD"
schemes:
- "http"
- "https"
paths:
  /grants/:
    get:
      tags:
      - "grants"
      summary: "Find a grant"
      description: ""
      operationID: "getGrant"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "query"
        name: "page"
        required: true
        schema:
          description: "A page number within the paginated result set."
          title: 'page'
          type: "integer"
      responses:
        405:
          description: "Invalid input"

    post:
      tags:
      - "grants"
      summary: "Add a new grant"
      description: ""
      operationId: "addGrant"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "Grant object to be added"
        required: true
        schema:
          $ref: "#/definitions/Grant"
      responses:
        405:
          description: "Invalid input"

    put:
      tags:
      - "grants"
      summary: "Update an existing grant"
      description: ""
      operationId: "updateGrant"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "Grant object to be added"
        required: true
        schema:
          $ref: "#/definitions/Grant"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Grant not found"
        405:
          description: "Validation exception"

  /grants/assigned_data_centre:
    get:
      tags:
      - "grants"
      summary: "Finds grants by data centre"
      description: "Multiple data centres can be provided with comma separated strings"
      operationId: "findGrantsByDataCentre"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "query"
        name: "assigned_data_centre"
        description: "Data centres to filter by"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "BODC"
          - "CEDA"
          - "EIDC"
          - "NGDC"
          - "PDC"
          - "ADS"
          - "None"
          default: "None"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
      schema:
        type: "string"
        title: "assigned_data_centre"
        items:
        $ref: "#/definitions/Grant"



#  /grants/findByDataCentre:
#    get:
#      tags:
#      - "grants"
#      summary: "Finds grants by data centre"
#      description: "Multiple data centres can be provided with comma separated strings"
#      operationId: "findGrantsByDataCentre"
#      produces:
#      - "application/json"
#      - "application/xml"
#      parameters:
#      - name: "assigned_data_centre"
#        in: "query"
#        description: "Status values that need to be considered for filter"
#        required: true
#        type: "array"
#        items:
#          type: "string"
#          enum:
#          - "BODC"
#          - "CEDA"
#          - "EIDC"
#          - "NGDC"
#          - "PDC"
#          - "ADS"
#          - "None"
#          default: "None"
#        collectionFormat: "multi"
#      responses:
#        200:
#          description: "successful operation"
#          schema:
#            type: "array"
#            items:
#              $ref: "#/definitions/Grant"
#        400:
#          description: "Invalid status value"
#
#  /grants/{grantId}:
#    delete:
#      tags:
#      - "grants"
#      summary: "Delete a grant"
#      description: ""
#      operationId: "deleteGrant"
#      produces:
#      - "application/json"
#      - "application/xml"
#      parameters:
#      - name: "api_key"
#        in: "header"
#        required: false
#        type: "string"
#      - name: "grantId"
#        in: "path"
#        description: "Grant id to delete"
#        required: true
#        type: "integer"
#        format: "int64"
#      responses:
#        400:
#          description: "Invalid ID supplied"
#        404:
#          description: "Grant not found"

  /importedgrants/:
    get:
      tags:
        - "importedgrants"
      summary: "Find an imported grant"
      description: ""
      operationID: "getImportedGrant"
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - in: "query"
          name: "page"
          required: true
          schema:
            description: "A page number within the paginated result set."
            title: 'page'
            type: "integer"
      responses:
        405:
          description: "Invalid input"

    post:
      tags:
      - "importedgrants"
      summary: "Add a new imported grant"
      description: ""
      operationId: "addImportedGrant"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "Imported grant object to be added"
        required: true
        schema:
          $ref: "#/definitions/ImportedGrant"
      responses:
        405:
          description: "Invalid input"

    put:
      tags:
      - "importedgrants"
      summary: "Update an existing imported grant"
      description: ""
      operationId: "updateImportedGrant"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "Imported grant object to be edited"
        required: true
        schema:
          $ref: "#/definitions/ImportedGrant"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Grant not found"
        405:
          description: "Validation exception"

#  /importedgrants/{importedgrantId}:
#    delete:
#      tags:
#      - "importedgrants"
#      summary: "Delete an imported grant"
#      description: ""
#      operationId: "deleteImportedGrant"
#      produces:
#      - "application/json"
#      - "application/xml"
#      parameters:
#      - name: "api_key"
#        in: "header"
#        required: false
#        type: "string"
#      - name: "importedgrantId"
#        in: "path"
#        description: "Imported grant id to delete"
#        required: true
#        type: "integer"
#        format: "int64"
#      responses:
#        400:
#          description: "Invalid ID supplied"
#        404:
#          description: "Imported grant not found"


  /users:
    post:
      tags:
      - "users"
      summary: "Create user"
      description: "This can only be done when a user with admin rights is logged in."
      operationId: "createUser"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"

  /users/accounts/login:
    get:
      tags:
      - "users"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "username"
        in: "query"
        description: "The email address for the user."
        required: true
        type: "string"
        format: "email"
      - name: "password"
        in: "query"
        description: "The password for the user."
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"

  /users/accounts/logout:
    get:
      tags:
      - "users"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/json"
      - "application/xml"
      parameters: []
      responses:
        default:
          description: "successful operation"

  /users/{emailAddress}:
    get:
      tags:
      - "users"
      summary: "Get user by email address"
      description: ""
      operationId: "getUserByEmailAddress"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "emailAddress"
        in: "path"
        description: "The email address of the user that needs to be fetched "
        required: true
        type: "string"
        format: "email"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid email address supplied"
        404:
          description: "User not found"

    put:
      tags:
      - "users"
      summary: "Update user"
      description: "This can only be done when a user with admin rights is logged in."
      operationId: "updateUser"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "emailAddress"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
        format: "email"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"

    delete:
      tags:
      - "users"
      summary: "Delete user"
      description: "This can only be done when a user with admin rights is logged in."
      operationId: "deleteUser"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "emailAddress"
        in: "path"
        description: "The email address of the user that needs to be deleted"
        required: true
        type: "string"
        format: "email"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"



securityDefinitions:
  grants_auth:
    type: "basic"

definitions:

  Grant:
    type: "object"
    required:
    - "grant_ref"
    properties:
      grant_ref:
        type: "string"
        pattern: '^\d{2}/\d{7}/\d{1}$'
        example: "NE/I076542/1"
      alt_data_contact_email:
        type: "string"
        format: "email"
        example: "user@example.ac.uk"
      alt_data_contact_phone:
        type: "string"
      assigned_data_centre:
        type: "string"
        enum:
          - "BODC"
          - "CEDA"
          - "EIDC"
          - "NGDC"
          - "PDC"
          - "ADS"
          - "None"
      other_data_centre:
        type: "string"
        enum:
          - "BODC"
          - "CEDA"
          - "EIDC"
          - "NGDC"
          - "PDC"
          - "ADS"
          - "None"
        example: "CEDA"
      hide_record:
        type: "boolean"
        default: "False"
      date_contacted_pi:
        type: "string"
        format: "date"
      will_grant_produce_data:
        type: "boolean"
        default: "None"
      datasets_delivered:
        type: "boolean"
        default: "None"
      sanctions_recommended:
        type: "boolean"
        default: "None"
      case_for_support_found:
        type: "boolean"
        default: "None"
    xml:
      name: "Grant"

  ImportedGrant:
    type: "object"
    required:
      - "title"
      - "grant_ref"
    properties:
      title:
        type: "string"
        example: "Climate Hazard"
      grant_ref:
        type: "string"
        pattern: '^\d{2}/\d{7}/\d{1}$'
        example: "NE/I076542/1"
      grant:
        type: "string"
        pattern: '^\d{2}/\d{7}/\d{1}$'
        example: "NE/I076542/1"
      grant_status:
        type: "string"
        enum:
          - "Active"
          - "Closed"
      amount_awarded:
        type: "integer"
        format: "int32"
        example: "50000"
      grant_type:
        type: "string"
      scheme:
        type: "string"
      lead_grant:
        type: "boolean"
        default: "False"
      parent_grant:
        type: "string"
        pattern: '^\d{2}/\d{7}/\d{1}$'
        example: "NE/I076542/1"
      grant_holder:
        type: "string"
        example: "Professor Example"
      department:
        type: "string"
      research_org:
        type: "string"
      address1:
        type: "string"
      address2:
        type: "string"
      city:
        type: "string"
      post_code:
        type: "string"
      email:
        type: "string"
        format: "email"
      work_number:
        type: "string"
      data_contact_email:
        type: "string"
        format: "email"
      data_contact_phone:
        type: "string"
      routing_classification:
        type: "string"
        enum:
          - "Marine"
          - "Earth"
          - "Atmospheric"
          - "Freshwater"
          - "Terrestrial"
          - "Earth Observation"
      secondary_classification:
        type: "string"
      science_area:
        type: "string"
      ncas:
        type: "boolean"
        default: "False"
      nceo:
        type: "boolean"
        default: "False"
      comments:
        type: "string"
      proposed_start_date:
        type: "string"
        format: "date"
      proposed_end_date:
        type: "string"
        format: "date"
      actual_start_date:
        type: "string"
        format: "date"
      actual_end_date:
        type: "string"
        format: "date"
      abstract:
        type: "string"
      objectives:
        type: "string"
    xml:
      name: "Imported Grant"

  User:
    type: "object"
    properties:
      first_name:
        type: "string"
      last_name:
        type: "string"
      email:
        type: "string"
        format: "email"
      password:
        type: "string"
      data_centre:
        type: "string"
        enum:
          - "BODC"
          - "CEDA"
          - "EIDC"
          - "NGDC"
          - "PDC"
          - "ADS"
      is_admin:
        type: "boolean"
        default: "False"
    xml:
      name: "User"