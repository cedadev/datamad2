from django.db import models
from datamad2.models import MyUser


from datetime import datetime, timedelta, date
from django.contrib.contenttypes.fields import GenericRelation, GenericForeignKey
from django.contrib.contenttypes.models import ContentType
from django.db.models.fields import PositiveIntegerField

# import users
from django.contrib.auth.models import *

from sizefield.models import FileSizeField


class Person(MyUser):
    class Meta:
        proxy = True
        ordering = ('first_name',)

    def __str__(self):
        return self.first_name + ' ' + self.last_name

class Programme(models.Model):

    # grants have a programme

    title = models.CharField(max_length=200)

    def __str__(self):
        return f"{self.title[:50]}"


class Project(models.Model):

    # Projects are activities under funding programmes that are examined
    # for their data management needs.

    title = models.CharField(max_length=200)
    date_added = models.DateTimeField(auto_now_add=True)
    desc = models.TextField(blank=True, null=True, verbose_name="Description")
    notes = GenericRelation("Note")
    data_activities = models.TextField(blank=True, null=True, help_text="Short description of data generation activities. eg Data will be collected by FAAM aircraft/ground instruments. Are there intensive measurement campaigns?")
    startdate = models.DateField(blank=True, null=True,verbose_name="Start Date",help_text="Date format dd/mm/yyyy")
    enddate = models.DateField(blank=True, null=True,verbose_name="End Date",help_text="Date format dd/mm/yyyy")
    dmp_agreed = models.DateField(blank=True, null=True, verbose_name="DMP Agreed on",help_text="Date format dd/mm/yyyy")
    initial_contact = models.DateField(blank=True, null=True, verbose_name="Initial Contact on",help_text="Date format dd/mm/yyyy")
    sciSupContact = models.ForeignKey(Person, help_text="Data centre contact for this project", blank=True, null=True, on_delete=models.PROTECT)
    sciSupContact2 = models.ForeignKey(Person, help_text="Data centre contact for this project", blank=True, null=True, related_name="sciSupContact2s", on_delete=models.PROTECT)
    PI = models.CharField(max_length=200, blank=True, null=True)
    PIemail = models.EmailField(max_length=200, blank=True, null=True, verbose_name='PI email')
    PIinst = models.CharField(max_length=200, blank=True, null=True)
    Contact1 = models.CharField(max_length=200, blank=True, null=True)
    Contact2 = models.CharField(max_length=200, blank=True, null=True)
    projectcost = models.IntegerField(blank=True, null=True)
    services = models.TextField(blank=True, null=True)
    primary_dataCentre = models.CharField(max_length=200,blank=True, null=True, verbose_name="Primary Data Centre")
    other_dataCentres = models.CharField(max_length=200, blank=True, null=True, verbose_name="Other Data Centres")
    status = models.CharField(max_length=200, blank=True, null=True,
            choices=(("Proposal","Proposal"),
                 ("NotFunded","Not Funded"),
                 ("NotStarted","Not Started"),
                 ("Active","Active"),
                 ("NoData","No Data"),
                 ("EndedWithDataToCome","Ended with data to come"),
                 ("Defaulted","Defaulted"),
                 ("NoDataForUs","No data for us"),
                 ("Complete","Complete"),
                 ("Unresponsive", "Unresponsive"),
                 ("MergedProject/HandledElsewhere", "Merged Project/Handled Elsewhere"),
                     ))
    project_status = models.CharField(max_length=200, blank=True, null=True,
            choices=(("Initial contact", "Initial contact"),
                 ("DMP comms","DMP comms"),
                 ("Progress","Progress"),
                 ("Data delivery", "Data delivery"),
                     ))
    modified = models.DateTimeField(auto_now=True)
    #third_party_data = models.ManyToManyField('DataProduct', related_name='requirements+',
                        #blank=True, null=True)
    # vms = models.ManyToManyField(VM, blank=True, null=True)
    # groupworkspaces = models.ManyToManyField(GWS, blank=True, null=True)
    project_URL = models.URLField(blank=True, null=True)
    dmp_URL = models.URLField(blank=True, null=True, verbose_name="DMP URL")
    ODMP_URL = models.URLField(blank=True,null=True, help_text="Outline DMP URL autogenerated when using grant uploader, essentially a best guess. Edit as necessary.")
    moles_URL = models.URLField(blank=True,null=True)
    helpscout_url = models.URLField(blank=True, null=True, verbose_name="OpMan URL")
    project_usergroup = models.CharField(max_length=200, blank=True, null=True, help_text="Group name for registration for this group")
    #metadata_form = GenericRelation("MetadataForm")
    programme = models.ForeignKey(Programme, blank=True, null=True, on_delete=models.PROTECT )
    reassigned = models.BooleanField(default=False)

    def __str__(self):
        return f"{self.title[:50]}"

    def ndata(self):
        dps = DataProduct.objects.filter(project=self)
        return len(dps)





class DataProduct(models.Model):
    # Data products are data streams produced by projects

    title = models.CharField(max_length=200)
    desc = models.TextField(blank=True, null=True, verbose_name='Description')
    notes = GenericRelation("Note")
    datavol = FileSizeField(default=0, verbose_name='Data Volume')
    project = models.ForeignKey(Project, help_text="Project producing this data", blank=True, null=True, on_delete=models.PROTECT)
    sciSupContact = models.ForeignKey(Person, help_text="Data centre contact for this data", blank=True, null=True, on_delete=models.PROTECT)
    contact1 = models.CharField(max_length=200, blank=True, null=True, verbose_name='Contact 1')
    contact2 = models.CharField(max_length=200, blank=True, null=True, verbose_name='Contact 2')
    deliverydate = models.DateField(blank=True, null=True, verbose_name='Delivery Date')
    preservation_plan = models.CharField(
        max_length=200,
        blank=True,
        null=True,
        choices=(
            ("Reference", "Reference data with principal use to provide evidence for publication"),
            ("Structured", "Structured data with set format and metadata conventions"),
            ("Interoperable", "Interoperable data with formats and metadata conventions for specific community tools"),
            ("InProject", "Data management within the project only. No archive involvement"),
            ("OtherRepositories", "Other Non-NERC repositories"),
            ("BODC", "British Oceanographic Data Centre"),
            ("EIDC", "Environmental Information Data Centre "),
            ("PDC", "Polar Data Centre"),
            ("NGDC", "National Geoscience Data Centre"),
            ("OtherDMP", "This data is planned within another project DMP"),
            ("KeepIndefinitely", "Keep Indefinitely"),
            ("KeepAsIs", "Keep as is - Even if obsolete"),
            ("Dispose5years ", "Review for disposal 5 years after project completes"),
            ("ManageInProject", "Don't Archive - manage the data within the project"),
            ("Subset", "Plan to keep a subset of the data indefinitely"),
            ("TBD", "TBD")
        )
    )
    added = models.DateTimeField(auto_now_add=True)
    modified = models.DateTimeField(auto_now=True)
    review_date = models.DateTimeField(auto_now=True)
    status = models.CharField(max_length=200, blank=True, null=True,
                              choices=(("WithProjectTeam", "With Project Team"),
                                       ("Ingesting", "Ingesting"),
                                       ("Archived", "Archived and complete"),
                                       ("Defaulted", "Defaulted - not archived due to project not supplying data"),
                                       ("NotArchived", "Not going to archive - planned")))
    data_URL = models.URLField(blank=True, null=True)

    def __str__(self):
        return f"{self.title[:50]}"


class Note(models.Model):
    class Meta:
        verbose_name_plural = "Notes"
        ordering = ["added"]

    added = models.DateTimeField(auto_now_add=True)
    creator = models.ForeignKey(Person, null=True, blank=True, on_delete=models.PROTECT)
    notes = models.TextField(blank=True, null=True)

    content_type = models.ForeignKey(ContentType, null=True, blank=True, on_delete=models.PROTECT)
    object_id = PositiveIntegerField(null=True)
    location = GenericForeignKey('content_type', 'object_id')